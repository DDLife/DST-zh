{"id":"class","deps":["abstract/class"],"as":{},"info":"\n\nlua 没有 class. 这是为 lua 设计的 class, 具体实现见 @Class\n\n","extern":[{"id":"ClassRegistry","info":"\n\nClassRegistry = {}\n\n当 TrackClassInstances = true 时, 里面存放 @Class 生成的类\n\n"},{"id":"makereadonly","info":"\n\nt, k => ()\n\n使得 key 变为只读\n\n"},{"id":"addsetter","info":"\n\nt, k, fn : @setter => ()\n\n使得 key 变为只读\n\n"},{"id":"removesetter","info":""},{"id":"Class","info":"\n\nbase: class | function, \\_ctor : function, props => class\n\n- base: base class\n- \\_ctor: constructor function\n- props: 定义 @setter, 用于 data proxy\n\n  ```js\n  {key1: setter1, ...}\n  ```\n\nclass:\n\n- (self, ...): 构造函数\n- self.\\_ctor: constructor function\n- self.\\_base: base class, 用来调用父类方法实现方法的扩展\n- self.is_a: @\\_is_a\n- self.is_instance: class.is_instance(obj)\n\n注意:\n\n1. (func, nil, ?) == (nil, func, ?), 即说明 base 就是一个 constructor\n2. (func1, func2, ?) == (nil, func2, ?), \\_ctor 的优先级高 base\n\n进一步可见[Class](https://atjiu.github.io/dstmod-tutorial/#/class)\n\n"}],"local":[{"id":"_is_a","info":"\n\nself, klass => Boolean\n\n判断 self 是否是 klass 的实例\n\n"},{"id":"_is_class","info":"\n\nself => Boolean\n\n是否为 @Class\n\n"},{"id":"__index","info":"\n\nt, k => any\n\n用于 data proxy 时候, 类似于 js 的 getter\n\n"},{"id":"__newindex","info":"\n\nt, k, v => ()\n\n用于 data proxy 时候, 类似于 js 的 setter, 与 [Writing doesn’t use prototype](https://javascript.info/prototype-inheritance#writing-doesn-t-use-prototype)设计一致\n\n"},{"id":"__dummy","info":"\n\n() => ()\n\ndummy: 假动作\n\n"},{"id":"onreadonly","info":"\n\n实际上就是一个 @setter\n\n"}]}