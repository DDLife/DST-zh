{"id":"componentactions","deps":[],"as":{},"info":"","extern":[{"id":"AddComponentAction","info":"\n\n```ts\nAddComponentAction(\n  actiontype: string,\n  component: string,\n  fn: () => void,\n  modname: string\n): void;\n```\n\n```lua\nMOD_COMPONENT_ACTIONS[modname][actiontype][component] = fn\n```\n\n展现了 actions 的布局, 和 @COMPONENT_ACTIONS 结构一致\n\n```ts\nactiontype = \"SCENE\" | \"USEITEM\" | \"POINT\" | \"EQUIPPED\" | \"INVENTORY\";\n```\n\ncomponent 是名字, 如 pickable, pinnable\n\n"},{"id":"EntityScript-RegisterComponentActions","info":"\n\n```typescript\nRegisterComponentActions(name: string): void;\n```\n\nThe `RegisterComponentActions` method is used to register the actions that can be performed on a component with the specified name.\n\n"},{"id":"EntityScript-UnregisterComponentActions","info":"\n\n```typescript\nUnregisterComponentActions(name: string): void;\n```\n\nThe `UnregisterComponentActions` method is used to unregister the actions that can be performed on a component with the specified name.\n\n"},{"id":"EntityScript-CollectActions","info":"\n\n```typescript\nCollectActions(actiontype: string, ...args: any[]): void;\n```\n\nThe `CollectActions` method is used to collect the actions that can be performed on the entity of the specified action type.\n\n"},{"id":"EntityScript-IsActionValid","info":"\n\n```typescript\nIsActionValid(action: any, right: any): boolean;\n```\n\nThe `IsActionValid` method is used to determine whether the specified action is valid for the entity.\n\n"},{"id":"EntityScript-HasActionComponent","info":"\n\n```typescript\nHasActionComponent(name: string): boolean;\n```\n\nThe `HasActionComponent` method is used to determine whether the entity has a component with the specified name.\n\n"}],"local":[{"id":"Row","info":"\n\nOverall, the Row function is used to determine what actions are available to the player when they are attempting to row a boat. The function checks various conditions, such as whether the player is hovering over water or their own platform, and adds the appropriate actions to the available actions table.\n\n"},{"id":"COMPONENT_ACTIONS","info":"\n\nThe table contains five keys, each of which represents a different type of action that can be performed:\n\n- `SCENE`: This key represents the action of using an object in the game world. The arguments for this action are `inst`, `doer`, `actions`, and `right`.\n\n- `USEITEM`: This key represents the action of using an inventory item on an object in the game world. The arguments for this action are `inst`, `doer`, `target`, `actions`, and `right`.\n\n- `POINT`: This key represents the action of using an inventory item on a point in the game world. The arguments for this action are `inst`, `doer`, `pos`, `actions`, and `right`.\n\n- `EQUIPPED`: This key represents the action of using an equipped item on yourself or a target object in the game world. The arguments for this action are `inst`, `doer`, `target`, `actions`, and `right`.\n\n- `INVENTORY`: This key represents the action of using an inventory item. The arguments for this action are `inst`, `doer`, `actions`, and `right`.\n\nEach key in the `COMPONENT_ACTIONS` table is associated with an Lua table, which can be populated with functions that define the behavior of the action.\n\n"}]}